<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mark down图片上传博客失败解决方法</title>
      <link href="/2022/02/26/mark-down%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2022/02/26/mark-down%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><h3 id="修改属性值"><a href="#修改属性值" class="headerlink" title="修改属性值"></a>修改属性值</h3><p>打开博客所在的文件夹，找到_config.yml文件，修改post_asset_folder的值为 true</p><p>每次执行hexo n “文件名”命令，文件所在文件夹同时创建一个与同名文件执行时的文件夹，就可以把文件找寻这个文件夹内。</p><p>打开你的 md 文件，使用标签插件来插入同名文件夹内代码的图片</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span>图片描述<span class="token punctuation">]</span><span class="token punctuation">(</span>/md文件夹名字/name.jpg<span class="token punctuation">)</span></code></pre><p>如果不能正常显示则往下看</p><hr><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在目录 blog 调用 git bash<br>输入命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p>找到/node_modules/hexo-asset-image/index.js文件，修改文件内容</p><pre class=" language-bash"><code class="language-bash"><span class="token string">'use strict'</span><span class="token punctuation">;</span>var cheerio <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string<span class="token keyword">function</span> getPosition<span class="token punctuation">(</span>str, m, i<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token keyword">return</span> str.split<span class="token punctuation">(</span>m, i<span class="token punctuation">)</span>.join<span class="token punctuation">(</span>m<span class="token punctuation">)</span>.length<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>var version <span class="token operator">=</span> String<span class="token punctuation">(</span>hexo.version<span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo.extend.filter.register<span class="token punctuation">(</span><span class="token string">'after_post_render'</span>, function<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  var config <span class="token operator">=</span> hexo.config<span class="token punctuation">;</span>  if<span class="token punctuation">(</span>config.post_asset_folder<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      var <span class="token function">link</span> <span class="token operator">=</span> data.permalink<span class="token punctuation">;</span>  if<span class="token punctuation">(</span>version.length <span class="token operator">></span> 0 <span class="token operator">&amp;&amp;</span> Number<span class="token punctuation">(</span>version<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> 3<span class="token punctuation">)</span>     var beginPos <span class="token operator">=</span> getPosition<span class="token punctuation">(</span>link, <span class="token string">'/'</span>, 1<span class="token punctuation">)</span> + 1<span class="token punctuation">;</span>  <span class="token keyword">else</span>     var beginPos <span class="token operator">=</span> getPosition<span class="token punctuation">(</span>link, <span class="token string">'/'</span>, 3<span class="token punctuation">)</span> + 1<span class="token punctuation">;</span>  // In hexo 3.1.1, the permalink of <span class="token string">"about"</span> page is like <span class="token string">".../about/index.html"</span><span class="token keyword">.</span>  var endPos <span class="token operator">=</span> link.lastIndexOf<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> + 1<span class="token punctuation">;</span>    <span class="token function">link</span> <span class="token operator">=</span> link.substring<span class="token punctuation">(</span>beginPos, endPos<span class="token punctuation">)</span><span class="token punctuation">;</span>var toprocess <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'excerpt'</span>, <span class="token string">'more'</span>, <span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>var i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toprocess.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  var key <span class="token operator">=</span> toprocess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  var $ <span class="token operator">=</span> cheerio.load<span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>, <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    ignoreWhitespace: false,    xmlMode: false,    lowerCaseTags: false,    decodeEntities: <span class="token boolean">false</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>  <span class="token punctuation">$(</span><span class="token string">'img'</span><span class="token punctuation">)</span>.each<span class="token punctuation">(</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span>this<span class="token variable">)</span></span>.attr<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  // For windows style path, we replace <span class="token string">'\' to '</span>/<span class="token string">'.  var src = <span class="token variable"><span class="token variable">$(</span>this<span class="token variable">)</span></span>.attr('</span>src<span class="token string">').replace('</span>\\<span class="token string">', '</span>/<span class="token string">');  if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;     !/^\s*\//.test(src)) &amp;#123;    // For "about" page, the first part of "src" can'</span>t be removed.    // In addition, to support multi-level local directory.    var linkArray <span class="token operator">=</span> link.split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>.filter<span class="token punctuation">(</span>function<span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    var srcArray <span class="token operator">=</span> src.split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>.filter<span class="token punctuation">(</span>function<span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> elem <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>    if<span class="token punctuation">(</span>srcArray.length <span class="token operator">></span> 1<span class="token punctuation">)</span>    srcArray.shift<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    src <span class="token operator">=</span> srcArray.join<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable"><span class="token variable">$(</span>this<span class="token variable">)</span></span>.attr<span class="token punctuation">(</span><span class="token string">'src'</span>, config.root + <span class="token function">link</span> + src<span class="token punctuation">)</span><span class="token punctuation">;</span>    console.info<span class="token operator">&amp;&amp;</span>console.info<span class="token punctuation">(</span><span class="token string">"update link as:-->"</span>+config.root + <span class="token function">link</span> + src<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>  console.info<span class="token operator">&amp;&amp;</span>console.info<span class="token punctuation">(</span><span class="token string">"no src attr, skipped..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console.info<span class="token operator">&amp;&amp;</span>console.info<span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span>this<span class="token variable">)</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span>  data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> $.html<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span></code></pre><p>之后在执行<code>hexo n &quot;文件名&quot;</code>命令，把图片放到同名文件夹内再引用</p><hr><h3 id="第三种（个人推荐）"><a href="#第三种（个人推荐）" class="headerlink" title="第三种（个人推荐）"></a>第三种（个人推荐）</h3><h3 id="使用即刻图床（浏览器扩展插件）"><a href="#使用即刻图床（浏览器扩展插件）" class="headerlink" title="使用即刻图床（浏览器扩展插件）"></a>使用即刻图床（浏览器扩展插件）</h3><p>电脑内的图片或者拖拽图片，生成markdown连接，复制粘贴到md文件中。</p><p>前面几个图片方法没有成功，只有图床能够完整并且全部显示的插件。</p><p>如果标签插件和安装插件都没有成功的话可以试一下图床扩展！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md文件语法笔记</title>
      <link href="/2022/02/25/md%E6%96%87%E4%BB%B6%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/25/md%E6%96%87%E4%BB%B6%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="由于博客文章本身就是用md语法来写的，所以为了避免冲突就用图片展示"><a href="#由于博客文章本身就是用md语法来写的，所以为了避免冲突就用图片展示" class="headerlink" title="由于博客文章本身就是用md语法来写的，所以为了避免冲突就用图片展示"></a>由于博客文章本身就是用md语法来写的，所以为了避免冲突就用图片展示</h2><p><img src="https://ae01.alicdn.com/kf/H0a28fb56a7f241eb8a46631af34d1ed7Y.png" alt="1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络暴力舆论的现状、特征和成因</title>
      <link href="/2022/02/23/%E7%BD%91%E7%BB%9C%E6%9A%B4%E5%8A%9B%E8%88%86%E8%AE%BA%E7%9A%84%E7%8E%B0%E7%8A%B6%E3%80%81%E7%89%B9%E5%BE%81%E5%92%8C%E6%88%90%E5%9B%A0/"/>
      <url>/2022/02/23/%E7%BD%91%E7%BB%9C%E6%9A%B4%E5%8A%9B%E8%88%86%E8%AE%BA%E7%9A%84%E7%8E%B0%E7%8A%B6%E3%80%81%E7%89%B9%E5%BE%81%E5%92%8C%E6%88%90%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、网络暴民的由来及特征"><a href="#一、网络暴民的由来及特征" class="headerlink" title="一、网络暴民的由来及特征"></a>一、网络暴民的由来及特征</h2><p>　　2006年4月，一位悲情丈夫在网上发表了一封五千字的长信，痛斥一位网名为“铜须”的大学生与他妻子有染。随即，数百人在未经事实验证的前提下，轻率地加入网络攻击的战团，其中一人更建议“以键盘为武器砍下奸夫的头，献给那位丈夫做祭品”。短短几天内，数十万网民组队对“铜须”发出网络追杀令，搜寻并发布了这名学生的真实姓名、身份、住址和生活细节，并呼吁社会封杀“铜须”“呼吁广大机关、企业、医院……对××（铜须原名）及其同伴进行抵制。不录用、不认可、不理睬……”。</p><p>　　针对此事，《纽约时报》《国际先驱论坛报》等欧美报纸，相继刊发报道，质疑中国网民的做法是对个人权利（隐私权、情感和生活方式选择权等）的严重侵犯。《国际先驱论坛报》更以《以键盘为武器的中国暴民》为题，强烈抨击中国网民的“暴民现象”，质疑中国网民的做法是对个人权利的严重侵犯。中央电视台、《中国新闻周刊》《三联生活周刊》等国内媒体也纷纷以此为专题进行讨论、评说。虽然目前国内外学界和业界还没有对“网络暴民”的内涵明确地界定。针对去年7月发生的后母虐童事件，《人民日报》总结出了“网络舆论暴力”三大特征：</p><p>　　a.以道德的名义，恶意制裁、审判当事人并谋求网络问题的现实解决；</p><p>　　b.通过网络追查并公布传播当事人的个人信息(隐私)，煽动和纠集人群以暴力语言进行群体围攻；</p><p>　　c.在现实生活中使当事人遭到严重伤害并对现实产生实质性的威胁①。</p><hr><h2 id="二、网络舆论暴力现状和成因分析"><a href="#二、网络舆论暴力现状和成因分析" class="headerlink" title="二、网络舆论暴力现状和成因分析"></a>二、网络舆论暴力现状和成因分析</h2><p>　　从“陈易卖身救母”到“虐猫”再到“铜须”事件，网友们采取的策略如出一辙，将当事人的真实身份、姓名、照片、生活细节等个人隐私公布于众，使当事人承受的精神压力从虚拟的网络社区转移到现实社会中，打破他们原有的正常工作、学习和生活秩序，造成了严重的后果。陈易之母因不堪网友舆论重负，停止了治疗，最后不治去世。虐猫女子则用否定自己人格的言辞公开向全体网民道歉。而铜须事件中的女主人公则不得不与原本还深爱的老公离婚②。不少学者指出，网络暴力言论已经侵犯名誉权、侵犯隐私权。去年中青报社会调查中心与腾讯网新闻中心联合开展了一项在线调查（3226人参与），问题是，“您认为下面哪些是‘网络暴民’的典型特征？”显示结果如下：</p><p>　　内容</p><p>　　比例/%主观上有恶意制裁别人的倾向</p><p>　　62.6出口成“脏”</p><p>　　57.4不经当事人允许就擅自公开其隐私</p><p>　　56.8威胁当事人的人身安全</p><p>　　54.3动不动就质疑当事人的道德品质</p><p>　　48.2盲目跟随别人的意见</p><p>　　44.8 而业界人士认为，许多网上跟帖要素不全，只有论点，没有论证，喜欢夸大其事。网络上的暴力讨伐成为现实生活中谣言、争吵和打架的“网络加强版”，且言论暴力强度逐渐升级。踩猫事件发生后，曾有评论指出网络讨伐是一种值得警惕的暴力。反观“铜须门”事件，网络舆论几乎全是一边倒的诅咒，甚至有人在网上发出江湖追杀令，而黑客们掘地三尺，挖出当事人“铜须”的真实身份，个人的隐私权被露骨地践踏④。</p><p>　　网络暴力言论场之所以能够形成，主要有以下几个方面的原因：</p><p>　　(1) 网络媒体追求“点击为王”</p><p>　　为了追求点击率，网络媒体一向着力于策划议题，越有争议性越有“创意”。他们用吸引眼球的大图片和惊心动魄的大标题、细节故事的夸张放大为手段，将本来新闻价值不大的新闻事件进行炒作，几乎覆盖整个网络媒体行业。</p><p>　　2007年7月中旬，一篇名为《后妈毒打6岁继女》的帖子开始在网上流传，帖子称一位名为丁香小慧的6岁女童被后妈“打得口吐鲜血，背部6块脊椎骨基本被打断”，配发的血淋淋的图片更是触目惊心。经各大论坛转帖后，标题已升级为《史上最恶毒的后妈暴打6岁女儿》。血淋淋的图片和耸人听闻的标题成为网络挑动网民神经兴奋点的重要手段。后来事件证实6岁女孩吐血只是患病所致而非后母所为。网络对事件的报道都是在未核实的情况下加以放大，很难说不是网络媒体的炒作。</p><p>　　而虐猫事件在猫扑论坛发布后引起轩然，该版版主甚至只删除冷静分析的贴子却保留无理的谩骂贴子以增加其争论性。</p><p>　　（2）网民寻求解压窗口</p><p>　　网络的匿名性使得网民对言行的自律程度大大降低。根据 “沉默的螺旋”理论，人作为一种社会动物，总是力图从周围环境中寻求支持，避免陷入孤立的状态。所以面对部分网友围攻当事人，他们就会屈于环境压力而附和占上风的“暴民领袖⑤”。</p><p>　　基于中国近70％的网民文化程度在大学本科以下这一事实，也使大量网民对事物的认识深度与广度带有局限性。他们容易受到表面信息的左右，急于下是非性判断，难于短时间内理清事物背后复杂的心理及社会动因，容易用简单粗暴的方式惩罚他们认定的“坏人”，容易受群体情绪的影响，难对自己在“善良动机”下所导致的行为后果做出全面客观的估计等等。而所有这些局限性，都可能导致“网络暴民现象”的出现⑥。跟帖回复者轻信甚至“狐假虎威”“借刀杀人”，逐渐形成了暴力言论场。</p><p>　　（3）监督渠道缺少的唯一选择</p><p>　　南京大学杜骏飞教授认为，“在烧狗事件中，网络上众多言辞激烈的言论，从本质上讲，是对国家、地区、部门或社区行政力缺失的抗议”“最终，这些对行政力缺失的抗议被转移到了对烧狗人的谴责谩骂上。”传统媒体满足民众资讯需求的能力非常弱。在它既不能充分满足资讯需求，还时不时发布一些假大空消息的前提下，网络造成资讯的畸形需求和过度依赖⑦。网民都相信自己是掌握了真相的一方，这使得网络舆论一经发生就呈蔓延之势。</p><p>　　（4）传统媒体的煽风点火</p><p>　　网络和传统媒体正越来越深地纠缠到一起，互相印证，难分彼此。网络成为传统媒体的消息源，传统媒体将来料进行加工以后，又成为网络的供应商。传统媒体未经过采访调查就进行了转载报道，从客观上进行了第二轮的炒作，扩大了新闻事件的传播范围。</p><p>　　在“最毒后妈”事件中，首先要追究的是那个制造和传播谎言的人和报道了假新闻的媒体。他们利用了网民的正义激情，他们为了吸引眼球和其他利益制造了噱头，但传统媒体未加证实的报道激化了网民的看法。</p><hr><h2 id="三、网络暴力舆论的意义分析"><a href="#三、网络暴力舆论的意义分析" class="headerlink" title="三、网络暴力舆论的意义分析"></a>三、网络暴力舆论的意义分析</h2><p>　　在看到网络舆论这种自身就缺乏监督的机制来监督政府、社会、他人的行为，变成了一场群体的道德讨伐时，是否更应考虑到此种监督的有效性与公正性。</p><p>　　1、消极的意义：无形的手杀人</p><p>　　在“后母虐童”之前，有“烧狗事件” “铜须事件”以及“虐猫事件”等。而这之前在网络上揭露的事件，如“重庆钉子户”“厦门PX项目”“山西黑砖窑”，后来都转化成公共事件，且得到了有效的解决，网络功不可没。但是，随着网络暴民越来越多的侵权行为的出现，我们必须清晰言论自由与侵权之间的界限。激烈的网络言论演化成了现实的社会威胁，甚至发生以暴制暴的事件，触及道德和法律的底线。上述的几个事件中，“网络暴力”打着维护道德的大旗，公布他人的隐私，践踏他人尊严，侮辱他人人格甚至威胁他人的生命财产安全。这样的舆论压力往往将事件的主角往悬崖上逼。网络已经成为无形的杀手。</p><p>　　2、积极的意义：促使新闻回归真相，实现自我纠错</p><p>　　北京大学谢新洲教授认为，“提出所谓‘网络通缉’等过激手段的毕竟是少数，各种声音（包括那些非理性的声音）的爆发、各种舆论场的出现，在互联网这个‘多中心’的传播时代是正常的现象，都为事件最终真相大白作出了贡献。在很多事件中，网民的反应是有正义感的人所应该表达出来的态度，证明了‘社会道德与良知的底线仍在’。⑧”而且宪法明文规定了公民的言论自由，言论自由天然包含了说错话的自由，尤其是质疑权力的自由。比网络暴力更加可怕的是对言论自由的剥夺。</p><p>　　更重要的是，网络虽然有时容易“意气用事”，但网络的开放使它有一种强大的自我纠错功能。网络自我纠错能力逐步的加强能够为言论自由和社会的完善提供更好的环境。网络舆论是双刃剑，在带来侵犯人权的行为之外，也可以加速还原事实的真相。网络暴力舆论涉及到网络、网民和传统媒体、政府相关部门，将自律、他律结合起来，处理好言论自由及暴力言论的度，网络暴力言论的场就转化为互联网之善了。怎样进行转化和引导，实践将会给出答案。</p><p>本文章转载自<a href="http://www.scio.gov.cn/wlcb/llyj/Document/307339/307339.htm">中华人名共和国国务院新闻办公室</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 社会人文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 社交网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客自建教程</title>
      <link href="/2022/02/17/%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
      <url>/2022/02/17/%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="1-注册一个GitHub-github账号并创建一个库"><a href="#1-注册一个GitHub-github账号并创建一个库" class="headerlink" title="1.注册一个GitHub: github账号并创建一个库"></a>1.注册一个GitHub: <a href="https://github.com/">github</a>账号并创建一个库</h3><p>库的名字为你的id.github.io </p><p>注意：如果你没有创建过GitHub的token的话，这里最好创建一个，因为现在使用token来代替GitHub的密码进行登录，你之前的密码将不能用于GitHub的登录。</p><h3 id="2-安装git，这部分很简单一路默认安装就可以了。"><a href="#2-安装git，这部分很简单一路默认安装就可以了。" class="headerlink" title="2.安装git，这部分很简单一路默认安装就可以了。"></a>2.安装<a href="https://git-scm.com/download/win">git</a>，这部分很简单一路默认安装就可以了。</h3><h3 id="3-​-安装nodejs-和Hexo，其实这个步骤是成功部署博客的核心。"><a href="#3-​-安装nodejs-和Hexo，其实这个步骤是成功部署博客的核心。" class="headerlink" title="3.​ 安装nodejs 和Hexo，其实这个步骤是成功部署博客的核心。"></a>3.​ 安装nodejs 和Hexo，其实这个步骤是成功部署博客的核心。</h3><p><a href="https://nodejs.org/en/">nodejs官网</a><br><a href="https://blog.csdn.net/antma/article/details/86104068?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164509649716780357291865%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164509649716780357291865&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-86104068.first_rank_v2_pc_rank_v29&utm_term=Node.js%E6%9C%80%E6%96%B0%E6%9C%80%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4187">nodejs安装教程</a></p><h4 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h4><p>之前我们已经在GitHub上创建了一个库，现在我们要做的就是在一个磁盘上新建一个Blog的文件夹来存放我们的blog文件。<br>点开Blog文件夹右键运行Git Bush Here，输入:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>完成后，输入 hexo init 来初始化博客。</p><pre class=" language-bash"><code class="language-bash">$ hexo init</code></pre><p>输入 hexo g 静态部署</p><pre class=" language-bash"><code class="language-bash">$ hexo g</code></pre><p>加载完后我们的网页已经部署完成</p><p>输入 hexo s 来查看</p><pre class=" language-bash"><code class="language-bash">$ hexo s</code></pre><p>在浏览器上输入 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以打开新部署的网页。、</p><h3 id="将网页上传到Github"><a href="#将网页上传到Github" class="headerlink" title="将网页上传到Github"></a>将网页上传到Github</h3><p>打开之前的 Blog 文件夹，用笔记本打开 _config.yml 文件</p><p>在文件底部添加如下字段</p><pre class=" language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: https://github.com/huahuiPj/xxx.github.io.git  <span class="token comment" spellcheck="true">#你的仓库地址</span>  branch: master</code></pre><p>仓库的地址在code里</p><p>注：branch 的值与你GitHub仓库的值是否一样。</p><p>之后blog文件夹打开Git Bash，安装Git部署插件，输入命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>之后输入下面三个命令：</p><pre class=" language-bash"><code class="language-bash">hexo clean   <span class="token comment" spellcheck="true">#清除缓存文件 db.json 和已生成的静态文件 public</span>hexo g       <span class="token comment" spellcheck="true">#生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span>hexo d       <span class="token comment" spellcheck="true">#自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span></code></pre><p>完成以后，打开浏览器，输入 <a href="https://xxx.github.io就可以打开你的网页了/">https://xxx.github.io就可以打开你的网页了</a></p><h3 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h3><p>我使用的是<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>的博客主题、<br><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">主题中文配置的说明文档</a></p><p>OK了，教程到此结束。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
